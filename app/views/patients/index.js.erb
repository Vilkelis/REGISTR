
//HTML формы
$("#pageStorage").html("<%= escape_javascript(render 'index')%>");

$("#Birth_DateFilterVal").datepicker({format:"dd.mm.yyyy", weekStart:1});
$("#Birth_DateFilterValE").datepicker({format:"dd.mm.yyyy", weekStart:1});

// Инициализация  всплывающих подсказок
initToolTips();

var viewParams =
{
  id: "patients.index",   //Имя View
  //Гриды
  grids:
  { demo: //Грид с именем ДЕМО
      { id: "demo",        //Имя грида
        //Описание колонок грида с сортировкой по умолчанию
        columns: [
            {  headerText: 'ДАННЫЕ О БОЛЬНОМ',
               columns: [
                    { headerText: 'Фамилия' , dataKey: "name_f", allowSort: true,  sortDirection: "ascending", sortOrder: 0, ensurePxWidth: true, width: 200},
                    { headerText: 'Имя', dataKey: "name_i", allowSort: true,  sortDirection: "ascending", sortOrder: 1, ensurePxWidth: true, width: 150},
                    { headerText: 'Отчество', dataKey: "name_o", allowSort: true,  sortDirection: "ascending", sortOrder: 1, ensurePxWidth: true, width: 150},
                    { headerText: 'Пол', dataKey: "sex", allowSort: true,  ensurePxWidth: true, width: 60},
                    { headerText: 'Дата рожд.', dataKey: "birth_date", allowSort: true,  ensurePxWidth: true, width: 80},
                    { headerText: 'Возраст (лет)', dataKey: "age", dataType:"string",  allowSort: true,  ensurePxWidth: true, width: 80},
//                    { headerText: 'Адрес', dataKey: "address", allowSort: true,  ensurePxWidth: true, width: 200},
//                    { headerText: 'Место работы', dataKey: "work_place", allowSort: true,  ensurePxWidth: true, width: 200},
//                    { headerText: 'Должность', dataKey: "work_position", allowSort: true,  ensurePxWidth: true, width: 200},
                    { headerText: 'Примечание', dataKey: "description", allowSort: false, ensurePxWidth: true, width: 300 }
                    ]
            },
            {  headerText: 'СТАЦИОНАРНЫЙ ЭТАП',
               columns: [  { headerText: 'Факторы риска больного',
                             columns: [
                               { headerText: 'Инвалид- ность', dataKey: "before_invalid", allowSort: true,  ensurePxWidth: true, width: 90},
                               { headerText: 'Причина выхода на инвалид- ность', dataKey: "before_invalid_descr", allowSort: true,  ensurePxWidth: true, width: 90},
                               { headerText: 'ИМТ', dataKey: "imt", allowSort: true,  ensurePxWidth: true, width: 90},
                               { headerText: 'Степ. ожир.', dataKey: "imt_cond", allowSort: true,  ensurePxWidth: true, width: 90},
                               { headerText: 'Наследст- венность', dataKey: "is_nasled", allowSort: true,  ensurePxWidth: true, width: 90},
                               { headerText: 'Курение', dataKey: "is_smoke", allowSort: true,  ensurePxWidth: true, width: 90},
                               { headerText: 'Артериальная гипертония', dataKey: "is_art_giper", allowSort: true,  ensurePxWidth: true, width: 120},
                               { headerText: 'Сахарный диабет', dataKey: "is_sahar_diabet", allowSort: true,  ensurePxWidth: true, width: 90},
                               { headerText: 'Глюкоза крови, ммоль/л', dataKey: "glukoza", allowSort: true,  ensurePxWidth: true, width: 90},
                               { headerText: 'ОХ до операции, ммоль/л', dataKey: "oh_before", allowSort: true,  ensurePxWidth: true, width: 90},
                               { headerText: 'ОХ в отделении, ммоль/л', dataKey: "oh_in_hospital", allowSort: true,  ensurePxWidth: true, width: 100}
                             ]},
                           { headerText: 'Клиническая характеристика',
                             columns: [
                                { headerText: 'Стенокардия, функц. класс', dataKey: "stenokard", allowSort: true,  ensurePxWidth: true, width: 120},
                                { headerText: 'Аневризм ЛЖ', dataKey: "is_anevrizm", allowSort: true,  ensurePxWidth: true, width: 90},
                                { headerText: 'ОНМК, год', dataKey: "onmk_year", allowSort: true,  ensurePxWidth: true, width: 90},
                                { headerText: 'ПИК, год', dataKey: "pik_year", allowSort: true,  ensurePxWidth: true, width: 90},
                                { headerText: 'ХСН по NYHA', dataKey: "xch", allowSort: true,  ensurePxWidth: true, width: 90},
                                { headerText: 'ХСН функц. класс', dataKey: "xch_class", allowSort: true,  ensurePxWidth: true, width: 90}
                             ]},
                           { headerText: 'Ангиографическая характеристика',
                             columns: [
                               { headerText: 'Поражение кор.русла',
                                 columns: [
                                     { headerText: 'Кол-во пораж. сосудов', dataKey: "sosud_qty", allowSort: true,  ensurePxWidth: true, width: 90},
                                     { headerText: '75 и окклюзия', dataKey: "is_sosud_75", allowSort: true,  ensurePxWidth: true, width: 90}
                                 ]},
                               { headerText: 'Фракция выброса ЛЖ',
                                 columns: [
                                     { headerText: 'ФВ до операции', dataKey: "fb_before", allowSort: true,  ensurePxWidth: true, width: 90},
                                     { headerText: 'ФВ п/операции', dataKey: "fb_after", allowSort: true,  ensurePxWidth: true, width: 90}
                                 ]},
                               { headerText: 'Левое предсердие',
                                 columns: [
                                     { headerText: 'ЛП до операции', dataKey: "lp_before", allowSort: true,  ensurePxWidth: true, width: 90},
                                     { headerText: 'ЛП п/операции', dataKey: "lp_after", allowSort: true,  ensurePxWidth: true, width: 90}
                                 ]}
                             ]},
                           { headerText: 'Сведения об операции',
                             columns: [
                                 { headerText: 'Дата операции', dataKey: "oper_date", allowSort: true,  ensurePxWidth: true, width: 90},
                                 { headerText: 'Тип операции', dataKey: "oper_type", allowSort: true,  ensurePxWidth: true, width: 100},
                                 { headerText: 'Исход операции', dataKey: "oper_result", allowSort: true,  ensurePxWidth: true, width: 100}
                             ]}

                        ]
            },
            {headerText: 'РЕАБИЛИТАЦИЯ',
             columns: [
                           { headerText: 'Направлен ', dataKey: "is_napravlen", allowSort: true,  ensurePxWidth: true, width: 100},
                           { headerText: 'ЛПУ', dataKey: "hospital_id", allowSort: true,  ensurePxWidth: true, width: 120}
                        ]
            },
            {headerText: 'АМБУЛАТОРНЫЙ ЭТАП',
             columns: [
                           { headerText: 'Инвалид- ность после операции', dataKey: "after_invalid", allowSort: true,  ensurePxWidth: true, width: 90},
                           { headerText: 'Причина выхода на инвалид- ность', dataKey: "after_invalid_descr", allowSort: true,  ensurePxWidth: true, width: 100},

                           { headerText: 'Судьба в отдален. периоде', dataKey:"fate", allowSort: true,  ensurePxWidth: true, width:80},
                            { headerText: 'Год смерти', dataKey:"death_year", allowSort: true,  ensurePxWidth: true, width: 80}
                      ]
             }
             ]

      ,
        currentRowValues: undefined,     //Текущая подствеченная строка (значения всех полей)
        currentRow: {idvalue: undefined, rownum:0, colnum:0}, //Текущая строка грида (для восстановления) содержит объект типа ...{rownum:10, idvalue:1432 colnum:5}
        filter:   //Фильтр, наложенный на грид
                    { name_f:{condition:1,value:""},
                      name_i:{condition:1,value:""},
                      name_o:{condition:1,value:""},
                      sex: {condition:1, value:""},
                      birth_date: {condition:1,value:"",value_end:""},
                      age: {condition:1, value:"", value_end:""},
                      address:{condition:1,value:""},
                      work_place:{condition:1,value:""},
                      work_position:{condition:1,value:""},
                      description:{condition:1,value:""} },
        search: {value: ""}, //Быстрый поиск, примененный к гриду
        sorting: undefined //Сортировка, примененная к гриду
        }
  }

};

saveViewFunction = saveView; //Установка глобальной функции сохранения вида
restoreView(); //Восстановление сохраненных значений грида

//Парсер данных для грида
var dataReader = new wijarrayreader([
         { name: 'name_f', mapping: 'name_f' }   ,
         { name: 'name_i', mapping: 'name_i' },
         { name: 'name_o', mapping: 'name_o' },
         { name: 'sex', mapping: function (item) { if(item.sex == 2) { return 'М';} else { return 'Ж';} }},
         { name: 'birth_date', mapping: 'birth_date' },
         { name: 'age', mapping: 'age' },
         { name: 'today', mapping: 'today' },
         { name: 'address', mapping:  'address'},
         { name: 'work_place', mapping:  'work_place'},
         { name: 'work_position', mapping:  'work_position'},
         { name: 'description', mapping:  'description'},
         { name: 'id', mapping: 'id' },
        
                  { name: 'before_invalid', mapping: 'before_invalid' }, //Инвалидность до операции - степень
                  { name: 'before_invalid_descr', mapping: 'before_invalid_descr' }, //Инвалидность до операции - причина

                  { name: 'weight', mapping: 'weight' }, //Вес
                  { name: 'height', mapping: 'height' }, //Рост
                  { name: 'imt', mapping: 'imt' }, //ИМТ
                  { name: 'imt_cond', mapping: 'imt_cond' }, //Степень ожирения
                  { name: 'is_nasled', mapping:  function (item) { if(item.is_nasled == 1) { return 'отягощена'} else {return 'не отягощена'} }  }, // 'Наследственность'
                  { name: 'is_smoke', mapping: function (item) { if(item.is_smoke == 1) { return 'Да'} else {return 'нет'} }  }, // 'Курение'
                  { name: 'is_art_giper', mapping: function (item) { if(item.is_art_giper == 1) { return 'Да'} else {return 'нет'} } }, //    'Артериальная гипертония'
                  { name: 'is_sahar_diabet', mapping: function (item) { if(item.is_sahar_diabet == 1) { return 'Да'} else {return 'нет'} } }, // 'Сахарный диабет'
                  { name: 'glukoza', mapping: 'glukoza' }, // 'Глюкоза крови, ммоль/л'
                  { name: 'oh_before', mapping: 'oh_before' }, //   'ОХ до операции,ммоль/л'
                  { name: 'oh_in_hospital', mapping: 'oh_in_hospital' }, //  'ОХ в отделении, ммоль/л', data
                  // 'Клиническая характеристика',

                  { name: 'stenokard', mapping: 'stenokard'}, //   #'Стенокардия, функц.класс' { name: 'decimal
                  { name: 'is_anevrizm', mapping: function (item) { if(item.is_anevrizm == 1) { return 'Да'} else {return 'нет'} }  }, // 'Аневризм ЛЖ' { name: 'integer
                  { name: 'onmk_year', mapping: 'onmk_year' }, // 		#  'ОНМК, год' { name: 'integer
                  { name: 'pik_year', mapping: 'pik_year' }, // 			# 'ПИК, год' { name: 'integer
                  { name: 'xch', mapping: 'xch' }, // 			  # 'ХСН по NYHA' { name: 'string
                  { name: 'xch_class', mapping: 'xch_class' }, // 		# 'ХСН функц.класс' { name: 'integer

                  // 'Ангиографическая характеристика',
                  //       'Поражение кор.русла',
                  { name: 'sosud_qty', mapping: 'sosud_qty' }, //'Кол-во пораж. сосудов' { name: 'integer
                  { name: 'is_sosud_75', mapping: function (item) { if(item.is_sosud_75 == 1) { return 'Да'} else {return 'нет'} }  }, //# '75 и окклюзия' { name: 'integer

                  //        'Фракция выброса ЛЖ',
                  { name: 'fb_before', mapping: 'fb_before' }, //  'ФВ до операции' { name: 'integer
                  { name: 'fb_after', mapping: 'fb_after' }, //  'ФВ п/операции'{ name: 'integer

                  //        'Левое предсердие',
                  { name: 'lp_before', mapping: 'lp_before' }, // 'ЛП до операции' { name: 'integer
                  { name: 'lp_after', mapping: 'lp_after' }, // 'ЛП п/операции' { name: 'integer

                  //    'Сведения об операции'
                  { name: 'oper_date', mapping: 'oper_date' }, //#  'Дата операции' { name: 'date
                  { name: 'oper_type', mapping: 'oper_type' }, //#  'Тип операции' ,{ name: 'string
                  { name: 'oper_result', mapping: 'oper_result' }, //	#  'Исход операции',{ name: 'string

                  // 'РЕАБИЛИТАЦИЯ',
                  { name: 'is_napravlen', mapping: function (item) { if(item.is_napravlen == 1) { return 'Да'} else {return 'нет'} }  }, //#  'Направлен ',{ name: 'integer
                  { name: 'hospital_id', mapping: 'hospital_id' }, //#  'ЛПУ' ,{ name: 'integer

                  //           'АМБУЛАТОРНЫЙ ЭТАП',
                  { name: 'after_invalid', mapping: 'after_invalid' }, //Инвалидность после операции - степень
                  { name: 'after_invalid_descr', mapping: 'after_invalid_descr' }, //Инвалидность после операции - причина

                  { name: 'fate', mapping: 'fate' }, //# 'Судьба в отдаленном периоде',{ name: 'string
                  { name: 'death_year', mapping: 'death_year' } //# 'Год смерти',{ name: 'integer

]);

//Источник данных для грида
var dataSource = new wijdatasource({

        dynamic: true,
        proxy: new wijhttpproxy({
            url: "patients.json",
            dataType: "json"  ,
            data: {
                    maxrows: 100
                  }
            //key: "rows"  //Имя массива строк в данных JSON (по умолчанию)
        } ) ,
        reader: {
				read: function (datasource) {
                    var count = datasource.data.totalrowcount; //Общее кол-во строк в таблице (берется из JSON)
                    var pages = datasource.data.totalpages; //Общее кол-во страниц
                    if( $("#demoalert") != undefined)
                    {
                        if(pages > 1)
                        {
                           $("#demoalert").html("<div class='alert'> <button class='close' data-dismiss='alert'>×</button>"+
                                                "<strong>Предупреждение!</strong> Отображены первые " + count + " строк таблицы. Установите фильтр или воспользуйтесь поиском, чтобы отобразить нужную информацию."+
                                                "</div>");

                        }
                        else
                        {
                            $("#demoalert").html("");
                        }
                    }
                    //по умолчанию padding отображает 10 кнопок для страниц и дальше кнопку ...
					datasource.data = datasource.data.rows; //Переносим строки в источник
					datasource.data.totalRows = count; //Задаем общее кол-во строк в таблице
					dataReader.read(datasource); //Парсим данные (читаем)
					}
			}

        ,
        loading: function (inDataSource, inUserData) //При обновлении грида. Можно подсунуть дополнительные параметры!!!
                        {


                            //Режим не загрузки настроек
                            viewParams.grids.demo.search.value = $('#demoqsearch').val();   //Сохраняем устанавливаемое значение, чтобы потом можно было восстановить
                            viewParams.grids.demo.sorting = dataSource.proxy.options.data.sorting; //Сохраняем значение сортировки грида

                            dataSource.proxy.options.data.search = viewParams.grids.demo.search.value; //Устанавливаем текст для быстрого поиска в запрос
                            dataSource.proxy.options.data.filter = viewParams.grids.demo.filter; //Установка глобавльного фильтра
 						}

    });

//Грид
$("#demo").wijgrid({
    allowSorting: true,
    allowPaging: false,
    allowKeyboardNavigation: true,
    data: dataSource,
    columnsAutogenerationMode: "none" //Режим автоматической генарации колонок по DataSource
    , highlightCurrentCell: true
    ,loadingText: "Загрузка..."
   // ,pageIndex: 0  //Номер страницы при загрузке грида    (нумерация с нуля начинается)
  // , pageSize: 100   //Количество строк на странице по умолчанию
    //,pagerSettings: { position: "bottom" , mode: "numeric", pageButtonCount: 5}
    ,scrollMode: "horizontal"   //Режим отображения скроллинга
    ,selectionMode: "singleRow" //Режим выделения ячеек в гриде (по умолчанию singleRow)
    , staticColumnIndex: -1 //Кол-во фиксированных колонок
    ,staticRowIndex: -1 //Кол-во фиксированных строк
    , showRowHeader: false //Показ колонки для строк
    ,ensureColumnsPxWidth: false   //Использовать ширину колонок (если = false (автоматическое определение) и у коллонки указано ensurePxWidth: true, то у колонки используется параметр width)
    ,showFilter: false //Показывать фильтр
    , columns: viewParams.grids.demo.columns
    ,loaded: function ()
    {
        tryToSelectRow(viewParams.grids.demo);
     }
}
);

//Для исключения глюка грида
window.onresize = function ()
{
   $("#demo").wijgrid("setSize","100%" ); //побеждение глюка не перерисовки содержимого грида при изменении размера окна броузера
};


//=================РАБОТА ФОРМЫ==========================================================================



//Показать форму фильтра
function showFilterForm()
{
    //устанавливаем значения из переменной
    $('#Name_FFilterCond').val(viewParams.grids.demo.filter.name_f.condition);
    $('#Name_FFilterVal').val(viewParams.grids.demo.filter.name_f.value);

    $('#Name_IFilterCond').val(viewParams.grids.demo.filter.name_i.condition);
    $('#Name_IFilterVal').val(viewParams.grids.demo.filter.name_i.value);

    $('#Name_OFilterCond').val(viewParams.grids.demo.filter.name_o.condition);
    $('#Name_OFilterVal').val(viewParams.grids.demo.filter.name_o.value);

    if(viewParams.grids.demo.filter.sex!=undefined)
    {
        $('#SexFilterCond').val(viewParams.grids.demo.filter.sex.condition);
        $('#SexFilterVal').val(viewParams.grids.demo.filter.sex.value);
    }

    if(viewParams.grids.demo.filter.birth_date!=undefined)
    {
        $('#Birth_DateFilterCond').val(viewParams.grids.demo.filter.birth_date.condition);
        $('#Birth_DateFilterVal').val(viewParams.grids.demo.filter.birth_date.value);
        $('#Birth_DateFilterValE').val(viewParams.grids.demo.filter.birth_date.value_end);
    }

    if(viewParams.grids.demo.filter.age!=undefined)
    {
        $('#AgeFilterCond').val(viewParams.grids.demo.filter.age.condition);
        $('#AgeFilterVal').val(viewParams.grids.demo.filter.age.value);
        $('#AgeFilterValE').val(viewParams.grids.demo.filter.age.value_end);
    }

    $('#AddressFilterCond').val(viewParams.grids.demo.filter.address.condition);
    $('#AddressFilterVal').val(viewParams.grids.demo.filter.address.value);

    $('#Work_PlaceFilterCond').val(viewParams.grids.demo.filter.work_place.condition);
    $('#Work_PlaceFilterVal').val(viewParams.grids.demo.filter.work_place.value);

    $('#Work_PositionFilterCond').val(viewParams.grids.demo.filter.work_position.condition);
    $('#Work_PositionFilterVal').val(viewParams.grids.demo.filter.work_position.value);

    $('#DescrFilterCond').val(viewParams.grids.demo.filter.description.condition);
    $('#DescrFilterVal').val(viewParams.grids.demo.filter.description.value);

    //показываем форму
    $('#demogridfilter').modal({show:true, keyboard:true, backdrop:true});
}



//Кнопка Очистить на форме фильтра
function clearFilterOnForm()
{
    $('#Name_FFilterCond').val(1);
    $('#Name_FFilterVal').val("");

    $('#Name_IFilterCond').val(1);
    $('#Name_IFilterVal').val("");

    $('#Name_OFilterCond').val(1);
    $('#Name_OFilterVal').val("");


    $('#SexFilterCond').val(1);
    $('#SexFilterVal').val("");

    $('#Birth_DateFilterCond').val(1);
    $('#Birth_DateFilterVal').val("");
    $('#Birth_DateFilterValE').val("");

    $('#AgeFilterCond').val(1);
    $('#AgeFilterVal').val("");
    $('#AgeFilterValE').val("");

    $('#AddressFilterCond').val(1);
    $('#AddressFilterVal').val("");

    $('#Work_PlaceFilterCond').val(1);
    $('#Work_PlaceFilterVal').val("");

    $('#Work_PositionFilterCond').val(1);
    $('#Work_PositionFilterVal').val("");

    $('#DescrFilterCond').val(1);
    $('#DescrFilterVal').val("");
}

//Кнопка OK на форме фильтра
function okFilterForm()
{
    viewParams.grids.demo.filter.name_f.condition = $('#Name_FFilterCond').val();
    viewParams.grids.demo.filter.name_f.value = $('#Name_FFilterVal').val();

    viewParams.grids.demo.filter.name_i.condition = $('#Name_IFilterCond').val();
    viewParams.grids.demo.filter.name_i.value = $('#Name_IFilterVal').val();

    viewParams.grids.demo.filter.name_o.condition = $('#Name_OFilterCond').val();
    viewParams.grids.demo.filter.name_o.value = $('#Name_OFilterVal').val();

    viewParams.grids.demo.filter.sex = {};
    viewParams.grids.demo.filter.sex.condition = $('#SexFilterCond').val();
    viewParams.grids.demo.filter.sex.value = $('#SexFilterVal').val();

    viewParams.grids.demo.filter.birth_date = {}
    viewParams.grids.demo.filter.birth_date.condition = $('#Birth_DateFilterCond').val();
    viewParams.grids.demo.filter.birth_date.value = $('#Birth_DateFilterVal').val();
    viewParams.grids.demo.filter.birth_date.value_end = $('#Birth_DateFilterValE').val();

    viewParams.grids.demo.filter.age = {}
    viewParams.grids.demo.filter.age.condition = $('#AgeFilterCond').val();
    viewParams.grids.demo.filter.age.value = $('#AgeFilterVal').val();
    viewParams.grids.demo.filter.age.value_end = $('#AgeFilterValE').val();

    viewParams.grids.demo.filter.address.condition = $('#AddressFilterCond').val();
    viewParams.grids.demo.filter.address.value = $('#AddressFilterVal').val();

    viewParams.grids.demo.filter.work_place.condition = $('#Work_PlaceFilterCond').val();
    viewParams.grids.demo.filter.work_place.value = $('#Work_PlaceFilterVal').val();

    viewParams.grids.demo.filter.work_position.condition = $('#Work_PositionFilterCond').val();
    viewParams.grids.demo.filter.work_position.value = $('#Work_PositionFilterVal').val();

    viewParams.grids.demo.filter.description.condition = $('#DescrFilterCond').val();
    viewParams.grids.demo.filter.description.value = $('#DescrFilterVal').val();

    $('#demogridfilter').modal('hide');
    refreshGrid(viewParams.grids.demo.id);
}

//Кнопка Отмена на форме фильтра
function cancelFilterForm()
{
  $('#demogridfilter').modal('hide');
}


//Кнопка Удалить грида
function gridDelete()
{
//  saveView();
  viewParams.grids.demo.currentRowValues = getGridSelectedRowValues('demo');
  if((viewParams.grids.demo.currentRowValues != undefined) && (viewParams.grids.demo.currentRowValues.id != undefined))
  {
    AlertYesNo('Удалить запись регистра "' + viewParams.grids.demo.currentRowValues.name_f +' ' + viewParams.grids.demo.currentRowValues.name_i + ' ' + viewParams.grids.demo.currentRowValues.name_o + ' ('+viewParams.grids.demo.currentRowValues.birth_date+' г.р.)' + '" ?',gridDoDelete);
  }
  else
  {
    AlertErr('Не выбрана строка. Действие не может быть выполнено.');
  }
}

//Само удаление записи из грида
function gridDoDelete(btnNo)
{
  if(btnNo==1)
  {
      //нажата кнопка ДА
      if(viewParams.grids.demo.currentRowValues != undefined)
      {
          //Нужно послать AJAX запрос на удаление. Пока он выполняется нужно заблокировать действия наверное...
          $.ajax({
            url: "<%=patients_path%>/"+viewParams.grids.demo.currentRowValues.id,
            type: "DELETE",
            data: ({id : viewParams.grids.demo.currentRowValues.id}),
            timeout: 5000,
            success: function(data, textStatus, jqXHR)
            {
                refreshGrid(viewParams.grids.demo.id); //Обновляем грид... еще бы выдать временное сообщение, что запись удалена успешно...
            },
            error: function(jqXHR, textStatus, errorThrown)
            {
              parseErrAndShow(jqXHR, textStatus, errorThrown);
            }
           });
      }
  }
  viewParams.grids.demo.currentRowValues = undefined; //Удаляем значения строки, чтобы не болтались.
}


function gridRefresh()
{
  refreshGrid(viewParams.grids.demo.id);
}

function gridNew()
{
   //Сохраняем текущий вид
  saveView(function() {
       //Нужно послать AJAX запрос на удаление. Пока он выполняется нужно заблокировать действия наверное...
      $.ajax({
        url: "<%=new_patient_path%>",
        type: "GET",
        //data: ({id : gridSelectedRow.id}),
        timeout: 5000,
        success: function(data, textStatus, jqXHR)
        {
           //Перешли в форму создания новой записи успешно
        },
        error: function(jqXHR, textStatus, errorThrown)
        {
          parseErrAndShow(jqXHR, textStatus, errorThrown);
        }
       });
   }
  );
}

function gridEdit()
{
  //Сохраняем текущий вид
  saveView(function() {
      viewParams.grids.demo.currentRowValues = getGridSelectedRowValues('demo');
      if( (viewParams.grids.demo.currentRowValues != undefined) && (viewParams.grids.demo.currentRowValues.id != undefined))
      {
           //Нужно послать AJAX запрос на удаление. Пока он выполняется нужно заблокировать действия наверное...
          $.ajax({
            url: "/patients/" + viewParams.grids.demo.currentRowValues.id + "/edit",
            type: "GET",
            data: ({id : viewParams.grids.demo.currentRowValues.id}),
            timeout: 5000,
            success: function(data, textStatus, jqXHR)
            {
               //Перешли в форму редактирования записи успешно
            },
            error: function(jqXHR, textStatus, errorThrown)
            {
              parseErrAndShow(jqXHR, textStatus, errorThrown);
            }
           });
      }
   }
  );
}



//Сохранение текущего представления doOnOk - действие, которое нужно выполнить, если сохранение успешно
function saveView(doOnOk)
{
  saveGidView(viewParams.id,viewParams.grids.demo);
  doOnOk();//Выполняем действие, если все отлично
}

//Восстанавливает текущее представление
function restoreView()
{
 try
 {
 restoreGridView(viewParams.id,viewParams.grids.demo); //Восстановили значения из Storage
 //Устанавливаем значения быстрого поиска в форму.
 $('#demoqsearch').val(viewParams.grids.demo.search.value);
 }
 catch (e)
 {

 }
 return 1;
}

